{"version":3,"sources":["view/pages/Home/Home.js"],"names":["Home","props","handleManager","today","Date","currentdate","getFullYear","getMonth","getDate","allcounter","todaycounter","pendingcounter","completedcounter","todaylist","pendinglist","completedlist","groups","bargraph","cart","JSON","parse","localStorage","getItem","i","forEach","item","date","push","status","id","value","length","setState","alllist","fetchrow","filterrecord","search","changestatus","row","setTimeout","dispatch","type","toast","success","copyrow","currenttime","getHours","getMinutes","number","Math","random","toString","newid","substr","created_date","created_time","state","cartrecord","compedcounter","dataextra","year","population","this","className","container","xs","onClick","variant","color","size","to","startIcon","map","index","key","title","description","time","arrow","height","data","max","valueField","argumentField","text","React","Component","connect"],"mappings":"0WA2BMA,E,YAEL,WAAYC,GAAQ,IAAD,8BACb,4CAAMA,KA+BZC,cAAgB,WACf,IAAIC,EAAQ,IAAIC,KACTC,EAAcF,EAAMG,cAAgB,KAAOH,EAAMI,WAAW,GAAK,IAAMJ,EAAMK,UAE7EC,EAAa,EACbC,EAAe,EACfC,EAAiB,EACjBC,EAAmB,EACnBC,EAAY,GACZC,EAAc,GACdC,EAAgB,GAChBC,EAAS,GACTC,EAAW,GAENC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,eAE7C,GAAW,MAARJ,EAqBF,IAAK,IAAIK,KApBTL,EAAKM,SAAQ,SAACC,GACbhB,GAAc,EACXgB,EAAKC,MAAQrB,IACfK,GAAgB,EAChBG,EAAUc,KAAKF,IAEC,WAAdA,EAAKG,SACPjB,GAAkB,EAClBG,EAAYa,KAAKF,IAED,aAAdA,EAAKG,SACPhB,GAAoB,EACpBG,EAAcY,KAAKF,IAEbA,EAAKC,QAAQV,EAChBA,EAAOS,EAAKC,MAAMC,KAAKF,EAAKI,IAE5Bb,EAAOS,EAAKC,MAAQ,CAACD,EAAKI,OAGjBb,EAChBC,EAASU,KAAK,CACJD,KAAKH,EACLO,MAAMd,EAAOO,GAAGQ,SAKzB,EAAKC,SAAS,CACVvB,WAAWA,EACjBC,aAAaA,EACbC,eAAeA,EACfC,iBAAiBA,EACjBqB,QAAQf,EACRL,UAAUA,EACVC,YAAYA,EACZC,cAAcA,EACXE,SAASA,EACTiB,UAAS,KAvFE,EA0FnBC,aAAe,SAACC,GACf,EAAKJ,SAAS,CAAEI,OAAOA,KA3FL,EA6FnBC,aAAe,SAACC,GACfC,YAAW,WACJD,EAAIV,OAAS,YAChB,EAAK3B,MAAMuC,SAAS,CAAEC,KAAM,eAAehB,KAAKa,IAC7C,EAAKpC,gBACXwC,IAAMC,QAAQ,iCACZ,MAnGe,EAqGhBC,QAAU,SAACN,GACV,EAAKN,SAAS,CAAEE,UAAS,IACzBK,YAAW,WACV,IAAIpC,EAAQ,IAAIC,KACZC,EAAcF,EAAMG,cAAgB,KAAOH,EAAMI,WAAW,GAAK,IAAMJ,EAAMK,UAC1EqC,EAAc1C,EAAM2C,WAAW,IAAK3C,EAAM4C,aAC1CC,EAASC,KAAKC,SAClBF,EAAOG,SAAS,IAChB,IAAIC,EAAQJ,EAAOG,SAAS,IAAIE,OAAO,EAAG,GAC1Cf,EAAIT,GAAKuB,EACTd,EAAIgB,aAAejD,EACnBiC,EAAIiB,aAAeV,EACtB,EAAK5C,MAAMuC,SAAS,CAAEC,KAAM,OAAOhB,KAAKa,IAClC,EAAKpC,gBACXwC,IAAMC,QAAQ,4BACf,MAlHE,EAAKa,MAAQ,CACZtB,UAAS,EACLuB,WAAW,GACXrB,OAAO,UACP3B,WAAW,EACjBC,aAAa,EACbC,eAAe,EACf+C,cAAc,EACdzB,QAAQ,GACRpB,UAAU,GACVC,YAAY,GACZC,cAAc,GACXE,SAAS,GACT0C,UAAU,CACd,CAAEC,KAAM,OAAQC,WAAY,OAC5B,CAAED,KAAM,OAAQC,WAAY,OAC5B,CAAED,KAAM,OAAQC,WAAY,OAC5B,CAAED,KAAM,OAAQC,WAAY,MAC5B,CAAED,KAAM,OAAQC,WAAY,MAC5B,CAAED,KAAM,OAAQC,WAAY,OAC5B,CAAED,KAAM,OAAQC,WAAY,QAtBb,E,iFA0BC,IAAD,OAElBtB,YAAW,WACD,EAAKrC,kBACN,O,+BAwFD,IAAD,SAEkC4D,KAAKN,MAAjBpB,GAFtB,EAECF,SAFD,EAEWuB,WAFX,EAEsBrB,QAC7B,OACc,yBAAK2B,UAAU,sBAEvB,yBAAKA,UAAU,qBACd,kBAAC,IAAD,CAAMC,WAAS,GACf,kBAAC,IAAD,CAAMvC,MAAI,EAACwC,GAAI,IACf,kBAAC,IAAD,CAAMF,UAAU,gBACL,yBAAKA,UAAU,SACZ,kBAAC,IAAD,CAAMC,WAAS,GACb,kBAAC,IAAD,CAAMvC,MAAI,EAACwC,GAAI,GACZ,2CAEH,kBAAC,IAAD,CAAMxC,MAAI,EAACwC,GAAI,GACZ,kBAAC,IAAD,CAAQC,QAAS,kBAAM,EAAK/B,aAAa,YAAY4B,UAAU,sCAAsCI,QAAQ,WAAWC,MAAM,UAAUC,KAAK,SAA7I,OACA,kBAAC,IAAD,CAAQH,QAAS,kBAAM,EAAK/B,aAAa,cAAc4B,UAAU,sCAAsCI,QAAQ,WAAWC,MAAM,UAAUC,KAAK,SAA/I,SACA,kBAAC,IAAD,CAAQH,QAAS,kBAAM,EAAK/B,aAAa,gBAAgB4B,UAAU,sCAAsCI,QAAQ,WAAWC,MAAM,UAAUC,KAAK,SAAjJ,WACA,kBAAC,IAAD,CAAQH,QAAS,kBAAM,EAAK/B,aAAa,kBAAkB4B,UAAU,sCAAsCI,QAAQ,WAAWC,MAAM,UAAUC,KAAK,SAAnJ,cAEH,kBAAC,IAAD,CAAM5C,MAAI,EAACwC,GAAI,GACZ,yBAAKF,UAAU,cACX,kBAAC,IAAD,CAAMO,GAAG,WACP,kBAAC,IAAD,CAAQP,UAAU,6BAA6BI,QAAQ,YAAYC,MAAM,UAAUC,KAAK,QAAQE,UAAW,kBAAC,IAAD,OAA3G,gBAMd,yBAAKR,UAAU,mBACW,IAAxBD,KAAKN,MAAMtB,SACb,4BAEC4B,KAAKN,MAAMpB,GACV0B,KAAKN,MAAMpB,GAAQoC,KAAI,SAAC/C,EAAMgD,GAAP,OACxB,wBAAIC,IAAKjD,EAAOA,EAAKI,GAAK4C,GAC1B,yBAAKC,IAAKjD,EAAOA,EAAKI,GAAK4C,GACxB,kBAAC,IAAD,CAAMT,WAAS,EAACD,UAAU,qBACvB,kBAAC,IAAD,CAAMtC,MAAI,EAACwC,GAAI,EAAGS,IAAKD,GACrB,oCAEF,kBAAC,IAAD,CAAMhD,MAAI,EAACwC,GAAI,GACb,2BAAG,2BAAIxC,EAAKkD,MAAT,MACH,2BAAIlD,EAAKmD,cAEX,kBAAC,IAAD,CAAMnD,MAAI,EAACwC,GAAI,GACb,2BAAG,sCAAH,IAAmBxC,EAAKC,MACxB,2BAAG,sCAAH,IAAmBD,EAAKoD,OAE1B,kBAAC,IAAD,CAAMpD,MAAI,EAACwC,GAAI,GACb,2BAAG,qDACH,2BAAIxC,EAAK6B,aAAa,OAAO7B,EAAK8B,eAEpC,kBAAC,IAAD,CAAM9B,MAAI,EAACwC,GAAI,GACC,WAAdxC,EAAKG,OACL,kBAAC,IAAD,CAAS+C,MAAM,gBAAgBG,OAAK,GACjC,kBAAC,IAAD,CAAQZ,QAAS,kBAAM,EAAK7B,aAAaZ,IAAOsC,UAAU,sCAAsCI,QAAQ,WAAWC,MAAM,UAAUC,KAAK,SAAxI,YAED,2BAAG,0CAEP,kBAAC,IAAD,CAAM5C,MAAI,EAACwC,GAAI,GACb,yBAAKF,UAAU,cACf,kBAAC,IAAD,CAASY,MAAM,OAAOG,OAAK,GAC1B,kBAAC,IAAD,CAAMR,GAAE,gBAAW7C,EAAKI,KACtB,kBAAC,IAAD,CAAQkC,UAAU,mCAAmCI,QAAQ,WAAWC,MAAM,UAAUC,KAAK,SAAQ,kBAAC,IAAD,SAGxG,kBAAC,IAAD,CAASM,MAAM,OAAOG,OAAK,GACxB,kBAAC,IAAD,CAAQZ,QAAS,kBAAM,EAAKtB,QAAQnB,IAAOsC,UAAU,sCAAsCI,QAAQ,WAAWC,MAAM,UAAUC,KAAK,SAAQ,kBAAC,IAAD,gBAUnJ,kBAAC,IAAD,CAAM5C,MAAI,EAACwC,GAAG,MAClB,yBAAKF,UAAU,QACX,wBAAIA,UAAU,UAAd,gCAKF,4BACE,kBAAC,IAAD,CAAUgB,OAAQ,UAQjC,kBAAC,IAAD,CAAMf,WAAS,EAACD,UAAU,aACtB,kBAAC,IAAD,CAAMtC,MAAI,EAACwC,GAAI,IACH,kBAAC,IAAD,CAAMxC,MAAI,EAACwC,GAAI,GACV,kBAAC,IAAD,KACf,kBAAC,IAAD,CACEe,KAAMlB,KAAKN,MAAMvC,UAEf,kBAAC,IAAD,MACD,kBAAC,IAAD,CAAWgE,IAAK,IAEhB,kBAAC,IAAD,CACEC,WAAW,QACXC,cAAc,SAEhB,kBAAC,IAAD,CAAOC,KAAK,yBACX,kBAAC,IAAD,SAIM,kBAAC,IAAD,CAAM3D,MAAI,EAACwC,GAAI,W,GA1OrBoB,IAAMC,WAsPVC,uBAJS,SAAA/B,GACpB,MAAO,KAG4B,KAAxB+B,CAA8BvF","file":"static/js/8.cf878707.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Home.scss';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\r\nimport OpenWithOutlinedIcon from '@material-ui/icons/OpenWithOutlined';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { toast } from 'react-toastify';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n  Chart,\r\n  BarSeries,\r\n  Title,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n} from '@devexpress/dx-react-chart-material-ui';\r\n\r\nimport { Animation } from '@devexpress/dx-react-chart';\r\n\r\n\r\nclass Home extends React.Component\r\n{\r\n\tconstructor(props) {\r\n\t      super(props);\r\n\t      this.state = {\r\n\t      \tfetchrow:true,\r\n            cartrecord:{},\r\n            search:'alllist',\r\n            allcounter:0,\r\n\t\t    todaycounter:0,\r\n\t\t    pendingcounter:0,\r\n\t\t    compedcounter:0,\r\n\t\t    alllist:[],\r\n\t\t    todaylist:[],\r\n\t\t    pendinglist:[],\r\n\t\t    completedlist:[],\r\n\t        bargraph:[],\r\n\t        dataextra:[\r\n\t\t\t  { year: '1950', population: 2.525 },\r\n\t\t\t  { year: '1960', population: 3.018 },\r\n\t\t\t  { year: '1970', population: 3.682 },\r\n\t\t\t  { year: '1980', population: 4.440 },\r\n\t\t\t  { year: '1990', population: 5.310 },\r\n\t\t\t  { year: '2000', population: 6.127 },\r\n\t\t\t  { year: '2010', population: 6.930 },\r\n\t\t\t],\r\n\t      }\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\t\r\n\t\tsetTimeout(() => { \r\n            this.handleManager();\r\n        }, 500);\r\n\t}\r\n\thandleManager = () => {\r\n\t\tvar today = new Date();\r\n\t    var currentdate = today.getFullYear() + '-' + (today.getMonth()+1) + '-' + today.getDate();\r\n        \r\n\t    let allcounter = 0;\r\n\t    let todaycounter = 0;\r\n\t    let pendingcounter = 0;\r\n\t    let completedcounter = 0;\r\n\t    let todaylist = [];\r\n\t    let pendinglist = [];\r\n\t    let completedlist = [];\r\n\t    var groups = {};\r\n\t    var bargraph = [];\r\n\r\n        const cart = JSON.parse(localStorage.getItem('cartrecord'));\r\n        \r\n        if(cart != null){\r\n        \tcart.forEach((item) => {\r\n\t\t        allcounter += 1;\r\n\t\t        if(item.date == currentdate){\r\n\t\t        \ttodaycounter += 1;\r\n\t\t        \ttodaylist.push(item);\r\n\t\t        }\r\n\t\t        if(item.status =='pending'){\r\n\t\t        \tpendingcounter += 1;\r\n\t\t        \tpendinglist.push(item);\r\n\t\t        }\r\n\t\t        if(item.status =='completed'){\r\n\t\t        \tcompletedcounter += 1;\r\n\t\t        \tcompletedlist.push(item);\r\n\t\t        }\r\n\t            if (item.date in groups) {\r\n\t\t            groups[item.date].push(item.id);\r\n\t\t        } else {\r\n\t\t            groups[item.date] = [item.id];\r\n\t\t        }\r\n\t\t    });\r\n\t        for (var i in groups) {\r\n\t\t    \tbargraph.push({\r\n\t                date:i,\r\n\t                value:groups[i].length\r\n\t\t    \t});\r\n\t        }\r\n        }\r\n        \r\n        this.setState({ \r\n            allcounter:allcounter,\r\n\t\t    todaycounter:todaycounter,\r\n\t\t    pendingcounter:pendingcounter,\r\n\t\t    completedcounter:completedcounter,\r\n\t\t    alllist:cart,\r\n\t\t    todaylist:todaylist,\r\n\t\t    pendinglist:pendinglist,\r\n\t\t    completedlist:completedlist,\r\n\t        bargraph:bargraph,\r\n\t        fetchrow:false\r\n        });\r\n    }\r\n\tfilterrecord = (search) => {\r\n\t\tthis.setState({ search:search });\r\n\t};\r\n\tchangestatus = (row) => {\r\n\t\tsetTimeout(() => { \r\n\t        row.status = 'completed';\r\n\t    \tthis.props.dispatch({ type: 'CHANGESTATUS',item:row });\r\n\t        this.handleManager();\r\n\t\t\ttoast.success(\"Status change successfully!\"); \r\n\t\t}, 1000);\r\n\t};\r\n    copyrow = (row) => {\r\n    \tthis.setState({ fetchrow:true });\r\n    \tsetTimeout(() => {\r\n\t    \tvar today = new Date();\r\n\t\t    var currentdate = today.getFullYear() + '-' + (today.getMonth()+1) + '-' + today.getDate();\r\n\t        var currenttime = today.getHours()+':'+ today.getMinutes();\r\n\t        var number = Math.random()\r\n\t        number.toString(36);\r\n\t        var newid = number.toString(36).substr(2, 9);\r\n\t        row.id = newid;\r\n\t        row.created_date = currentdate;\r\n\t        row.created_time = currenttime;\r\n\t    \tthis.props.dispatch({ type: 'COPY',item:row });\r\n            this.handleManager();\r\n\t\t    toast.success(\"Copy row successfully!\");\r\n\t\t}, 1000);    \r\n\t};\r\n\trender(){\r\n\t\t\r\n\t\tconst { fetchrow, cartrecord,search, } = this.state;\r\n\t\treturn(\r\n                <div className=\"mainbody home-page\">\r\n                   \r\n\t\t\t\t    <div className=\"padding20 gray-bg\">\r\n\t\t\t\t    \t<Grid container>\r\n\t\t\t\t    \t<Grid item xs={12}>\r\n\t\t\t\t    \t<Card className=\"margin-top20\">\r\n\t\t                  <div className=\"panel\">\r\n\t\t                     <Grid container>\r\n\t\t                       <Grid item xs={4}>\r\n\t\t                          <h4>To Do Demo</h4>\r\n\t\t                       </Grid>\r\n\t\t                       <Grid item xs={4}>\r\n\t\t                          <Button onClick={() => this.filterrecord('alllist')} className=\"btn btn-outline btn-success-outline\" variant=\"outlined\" color=\"primary\" size=\"small\">All</Button>\r\n\t\t                          <Button onClick={() => this.filterrecord('todaylist')} className=\"btn btn-outline btn-success-outline\" variant=\"outlined\" color=\"primary\" size=\"small\">Today</Button>\r\n\t\t                          <Button onClick={() => this.filterrecord('pendinglist')} className=\"btn btn-outline btn-success-outline\" variant=\"outlined\" color=\"primary\" size=\"small\">Pending</Button>\r\n\t\t                          <Button onClick={() => this.filterrecord('completedlist')} className=\"btn btn-outline btn-success-outline\" variant=\"outlined\" color=\"primary\" size=\"small\">Completed</Button>\r\n\t\t                       </Grid>\r\n\t\t                       <Grid item xs={4}>\r\n\t\t                          <div className=\"pull-right\">\r\n\t\t                              <Link to=\"/addnew\">\r\n\t\t                                <Button className=\"btn btn-primary capitalise\" variant=\"contained\" color=\"primary\" size=\"small\" startIcon={<AddCircleOutlineOutlinedIcon />}>Add New</Button>\r\n\t\t                              </Link>\r\n\t\t                          </div>\r\n\t\t                       </Grid>\r\n\t\t                     </Grid>\r\n\t\t                  </div>\r\n\t\t                  <div className=\"education-page\">\r\n\t\t                  { this.state.fetchrow === false ?\r\n\t\t                  <ol>\r\n\t\t                  { \r\n\t\t                  \tthis.state[search] ? \r\n\t\t                    this.state[search].map((item, index) => \r\n\t\t                   <li key={item ? item.id : index }> \r\n\t\t                   <div key={item ? item.id : index }>\r\n\t\t                      <Grid container className=\"border-bottom row\">\r\n\t\t                         <Grid item xs={1} key={index}>\r\n\t\t                           <p>&nbsp;</p>\r\n\t\t                         </Grid>\r\n\t\t                         <Grid item xs={5}>\r\n\t\t                           <p><b>{item.title},</b></p>\r\n\t\t                           <p>{item.description}</p>\r\n\t\t                         </Grid>\r\n\t\t                         <Grid item xs={2}>\r\n\t\t                           <p><b>Date : </b> {item.date}</p>\r\n\t\t                           <p><b>Time : </b> {item.time}</p>\r\n\t\t                         </Grid>\r\n\t\t                         <Grid item xs={2}>\r\n\t\t                           <p><b>Created Date and Time</b></p>\r\n\t\t                           <p>{item.created_date+' || '+item.created_time}</p>\r\n\t\t                         </Grid>\r\n\t\t                         <Grid item xs={1}>\r\n\t\t                         { item.status== 'pending' ?\r\n\t\t                           <Tooltip title=\"Change Status\" arrow>\r\n\t\t                              <Button onClick={() => this.changestatus(item)} className=\"btn btn-outline btn-success-outline\" variant=\"outlined\" color=\"primary\" size=\"small\">Pending</Button>\r\n\t\t                           </Tooltip>\r\n\t\t                          :  <p><b>Completed</b></p> }\r\n\t\t                         </Grid>\r\n\t\t                         <Grid item xs={1}>\r\n\t\t                           <div className=\"pull-right\">\r\n\t\t                           <Tooltip title=\"Edit\" arrow>\r\n\t\t                            <Link to={`/edit/${item.id}`}>\r\n\t\t                              <Button className=\"btn btn-outline btn-info-outline\" variant=\"outlined\" color=\"primary\" size=\"small\"><EditOutlinedIcon /></Button>\r\n\t\t                            </Link>\r\n\t\t                           </Tooltip>\r\n\t\t                           <Tooltip title=\"Copy\" arrow>\r\n\t\t                              <Button onClick={() => this.copyrow(item)} className=\"btn btn-outline btn-success-outline\" variant=\"outlined\" color=\"primary\" size=\"small\"><FileCopyOutlinedIcon /></Button>\r\n\t\t                           </Tooltip>\r\n\r\n\t\t                           </div>\r\n\t\t                         </Grid>\r\n\t\t                      </Grid>\r\n\t\t                    </div>\r\n\t\t                    </li>\r\n\t\t                    )\r\n\t\t                    : \r\n\t\t                      <Grid item xs=\"12\">\r\n\t\t            \t\t\t\t\t\t<div className=\"list\">\r\n\t\t            \t\t\t\t\t\t    <h5 className=\"center\">No record yet to be added</h5>\r\n\t\t            \t\t\t\t\t\t</div>\r\n\t\t                      </Grid>  \t\r\n\t\t                    }\r\n\t\t                    </ol>\r\n\t\t                  : <ol>\r\n\t\t                      <Skeleton height={70}/>\r\n\t\t                    </ol>  \r\n\t\t                  }  \r\n\t\t                  </div>\r\n\t\t               </Card>\r\n\t\t\t\t    \t </Grid> \r\n\r\n\t\t\t\t    \t</Grid>\r\n\t\t\t\t    \t<Grid container className=\"padding20\">\r\n\t\t\t\t    \t    <Grid item xs={2}></Grid>\r\n\t                        <Grid item xs={8}>\r\n\t                             <Paper>\r\n\t\t\t\t\t\t\t        <Chart\r\n\t\t\t\t\t\t\t          data={this.state.bargraph}\r\n\t\t\t\t\t\t\t        >\r\n\t\t\t\t\t\t\t            <ArgumentAxis />\r\n\t\t\t\t\t\t\t\t          <ValueAxis max={7} />\r\n\r\n\t\t\t\t\t\t\t\t          <BarSeries\r\n\t\t\t\t\t\t\t\t            valueField=\"value\"\r\n\t\t\t\t\t\t\t\t            argumentField=\"date\"\r\n\t\t\t\t\t\t\t\t          />\r\n\t\t\t\t\t\t\t\t          <Title text=\"Datewise Record List\" />\r\n\t\t\t\t\t\t\t            <Animation />\r\n\t\t\t\t\t\t\t        </Chart>\r\n\t\t\t\t\t\t\t    </Paper>\r\n\t                        </Grid>\r\n\t                        <Grid item xs={2}></Grid>\r\n\t\t                </Grid>\r\n\t\t\t\t    </div>\r\n\t\t\t\t    \r\n                </div>\r\n\t\t\t);\r\n\t}\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n    } \r\n}\r\nexport default connect(mapStateToProps,null)(Home);\r\n"],"sourceRoot":""}