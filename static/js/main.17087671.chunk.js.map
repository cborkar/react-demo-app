{"version":3,"sources":["helpers/history.js","helpers/index.js","PrivateRoute.js","view/pages/Layout/Header.js","App.js","serviceWorker.js","helpers/resumereducer.js","index.js","localstorage.js"],"names":["history","createBrowserHistory","PrivateRoute","Header","props","state","className","this","loading","Skeleton","height","width","position","Grid","container","item","xs","to","React","Component","withRouter","Home","lazy","Addnew","Edit","App","fallback","path","exact","component","render","pathname","Boolean","window","location","hostname","match","initialState","cartrecord","persistedState","key","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","action","type","id","title","description","date","time","status","created_date","created_time","getrow","filter","row","newgetrow","statusrow","newstatusrow","subscribe","value","setItem","stringify","saveState","getState","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17087671.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","export * from './history';\nexport * from './auth-header';","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  const userLoggedIn = localStorage.getItem('token');\n\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        userLoggedIn ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{ pathname: \"/login\" }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;","import React from 'react';\r\nimport './Header.scss';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Link } from 'react-router-dom';\r\nimport PersonAddTwoToneIcon from '@material-ui/icons/PersonAddTwoTone';\r\nimport ExitToAppTwoToneIcon from '@material-ui/icons/ExitToAppTwoTone';\r\nimport AccountCircleTwoToneIcon from '@material-ui/icons/AccountCircleTwoTone';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Loader from 'react-loader-spinner'\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nclass Header extends React.Component\r\n{\r\n\tconstructor(props) {\r\n\t      super(props);\r\n\t      this.state = {\r\n\t          \r\n\t      }\t     \r\n\t}\r\n\tcomponentWillMount() {\r\n\r\n\t}\r\n\t\r\n\trender()\r\n\t{\r\n\t\treturn(\r\n\t\t\t  \r\n              <div className=\"header-page\">\r\n                \r\n                { this.props.loading === true ? \r\n\t\t                <Skeleton height={50} width={50}/>\r\n\t\t       : ''}\r\n                <ToastContainer position=\"top-right\"/>\r\n                <div className=\"comman-header\">\r\n\t\t\t      <Grid container>\r\n\t\t\t        <Grid item xs={4}>\r\n\t\t\t            <h2 className=\"logo-img\">Demo</h2>\r\n\t\t\t        </Grid>\r\n\t\t\t        <Grid item xs={8}>\r\n\t\t\t          <div className=\"pull-right\">\r\n\t\t\t              <ul>\r\n\t                         <Link to=\"/home\">\r\n\t                           <li><i className=\"fa fa-price-tag\"></i> Home</li>\r\n\t                         </Link>\r\n\t\t\t\t             <Link to=\"/addnew\">\r\n\t\t\t\t          \t    <li><PersonAddTwoToneIcon /> <span>Add New</span></li>\r\n\t\t\t\t             </Link>\r\n\t\t\t\t           </ul>\r\n\t\t\t          </div>\r\n\t\t\t        </Grid>\r\n\t\t\t      </Grid>\r\n\t\t\t    </div>\r\n              </div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default withRouter(Header)\r\n","import React, { Suspense, lazy } from 'react';\nimport './App.css';\nimport { Redirect } from 'react-router-dom';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport { history } from './helpers';\nimport PrivateRoute from './PrivateRoute';\nimport Header from './view/pages/Layout/Header';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport Grid from '@material-ui/core/Grid';\nimport Loader from 'react-loader-spinner'\n\nconst Home = lazy(() => import('./view/pages/Home/Home'));\nconst Addnew = lazy(() => import('./view/pages/Addnew/Addnew'));\nconst Edit = lazy(() => import('./view/pages/Edit/Edit'));\n\nclass App extends React.Component {\n\n  constructor(props) {\n        super(props);\n  }\n  \n  render() {\n\n    return (\n            <Router>\n                <Header/>\n                <Suspense fallback={\n                <Grid container>\n                      <Grid item xs={1}></Grid>\n                    <Grid item xs={10}>\n                        <Skeleton height={700}/>\n                    </Grid>\n                    <Grid item xs={1}></Grid>\n                </Grid>}>\n                <Switch>\n                    <Route path=\"/\" exact component={Home} />\n                    <Route path=\"/home\" exact component={Home} />\n                    <Route path=\"/addnew\" component={Addnew} />\n                    <Route path=\"/edit/:id\" component={Edit} />\n                   \n                    <Route path=\"*\" render={() => <Redirect to={{pathname: \"/home\"}} />} /> \n                </Switch>\n                </Suspense>\n            </Router>\n        );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  cartrecord: [],\r\n};\r\nexport function reducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case 'ADD':\r\n        return [\r\n        ...state.cartrecord,\r\n        {\r\n          id: action.item.id,\r\n          title: action.item.title,\r\n          description: action.item.description,\r\n          date: action.item.date,\r\n          time: action.item.time,\r\n          status: 'pending',\r\n          created_date: action.item.created_date,\r\n          created_time: action.item.created_time,\r\n        }\r\n      ]  \r\n    case 'COPY':\r\n      return [\r\n        ...state.cartrecord,\r\n        {\r\n          id: action.item.id,\r\n          title: action.item.title,\r\n          description: action.item.description,\r\n          date: action.item.date,\r\n          time: action.item.time,\r\n          status: action.item.status,\r\n          created_date: action.item.created_date,\r\n          created_time: action.item.created_time,\r\n        }\r\n      ]       \r\n    case 'EDIT':\r\n        const getrow = state.cartrecord.filter((row) => row.id === action.item.id);\r\n        let newgetrow = getrow[0];\r\n        newgetrow.title = action.item.title;\r\n        newgetrow.description = action.item.description;\r\n        newgetrow.date = action.item.date;\r\n        newgetrow.time = action.item.time;\r\n        return [...state.cartrecord]\r\n    \r\n    case 'CHANGESTATUS':\r\n        const statusrow = state.cartrecord.filter((row) => row.id === action.item.id);\r\n        let newstatusrow = statusrow[0];\r\n        newstatusrow.status = action.item.status;\r\n        return [...state.cartrecord]\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/resume/ofont.css';\nimport '@fortawesome/fontawesome-free/hobbie/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport {saveState, loadState} from \"./localstorage\"\nimport { history } from './helpers';\nimport { reducer } from './helpers/resumereducer.js';\n\nconst persistedState = loadState(\"cartrecord\");\nconst store = createStore(reducer, {cartrecord:persistedState});\nstore.subscribe(() => saveState(\"cartrecord\", store.getState('cartrecord')));\n//localStorage.removeItem('cartrecord');\nReactDOM.render(\n    <BrowserRouter history={history}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","export const loadState = (key) => {\r\n    try {\r\n        const serializedState = localStorage.getItem(key);\r\n        if(serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    }\r\n    catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (key, value) => {\r\n    try {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n    catch (err) {\r\n\r\n    }\r\n};"],"sourceRoot":""}